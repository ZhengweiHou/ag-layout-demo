// Code generated by agservice. DO NOT EDIT!!!
// Code generated by agservice. DO NOT EDIT!!!
// Code generated by agservice. DO NOT EDIT!!!
//
// GenScope: service
// Generate time: 2025-09-19 16:58:27
// Versions:
//   - agservice: v0.0.1
//   - protoc: v6.31.1
// Source:
//   - api/hzw/hzw2.proto

package svcgen

import (
	smw "ag-core/ag/ag_ext"
	hzw "ag-layout-demo/api/hzw"
	service "ag-layout-demo/internal/service"
	"context"
	slog "log/slog"
)

// HzwHello2Proxy 服务代理
type HzwHello2Proxy struct {
	impl     *service.HzwHello2Impl
	handlers map[string]smw.HandlerFunc
}

// NewHzwHello2Proxy 创建HzwHello2Proxy
func NewHzwHello2Proxy(service *service.HzwHello2Impl, mws []smw.PrioritizedMiddleware) hzw.HzwHello2 {
	proxy := &HzwHello2Proxy{
		impl:     service,
		handlers: make(map[string]smw.HandlerFunc),
	}

	// 注册处理链
	proxy.handlers["HelloHzw2"] = smw.RegisterHandler("HelloHzw2", mws, func(ctx context.Context, req interface{}) (interface{}, error) {
		return proxy.impl.HelloHzw2(ctx, req.(*hzw.HzwRequest2))
	})
	// FIXME HelloHzwStream2 流式接口暂不支持代理

	return proxy
}

// HelloHzw2 HzwHello2Proxy proxy
func (p *HzwHello2Proxy) HelloHzw2(ctx context.Context, req *hzw.HzwRequest2) (*hzw.HzwReply2, error) {
	methodName := "HelloHzw2"
	handler := p.handlers[methodName]

	res, err := handler(ctx, req)
	if err != nil {
		slog.Error("failed to handle request!", "method", methodName, "error", err)
		return nil, err
	}

	return res.(*hzw.HzwReply2), nil
}

// HelloHzwStream2 HzwHello2Proxy proxy ClientStreaming ServerStreaming
func (p *HzwHello2Proxy) HelloHzwStream2(stream hzw.HzwHello2_HelloHzwStream2Server) error {
	// FIXME 流式接口暂不支持代理，直接调用实现
	return p.impl.HelloHzwStream2(stream)
}
