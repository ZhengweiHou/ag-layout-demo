// Code generated by agservice. DO NOT EDIT!!!
// Code generated by agservice. DO NOT EDIT!!!
// Code generated by agservice. DO NOT EDIT!!!
//
// GenScope: service
// Generate time: 2025-09-19 16:58:27
// Versions:
//   - agservice: v0.0.1
//   - protoc: v6.31.1
// Source:
//   - api/hzw/hzw.proto

package svcgen

import (
	smw "ag-core/ag/ag_ext"
	hzw "ag-layout-demo/api/hzw"
	service "ag-layout-demo/internal/service"
	"context"
	slog "log/slog"
)

// HzwHelloProxy 服务代理
type HzwHelloProxy struct {
	impl     *service.HzwHelloImpl
	handlers map[string]smw.HandlerFunc
}

// NewHzwHelloProxy 创建HzwHelloProxy
func NewHzwHelloProxy(service *service.HzwHelloImpl, mws []smw.PrioritizedMiddleware) hzw.HzwHello {
	proxy := &HzwHelloProxy{
		impl:     service,
		handlers: make(map[string]smw.HandlerFunc),
	}

	// 注册处理链
	proxy.handlers["HelloHzw"] = smw.RegisterHandler("HelloHzw", mws, func(ctx context.Context, req interface{}) (interface{}, error) {
		return proxy.impl.HelloHzw(ctx, req.(*hzw.HzwRequest))
	})
	// FIXME HelloHzwStream 流式接口暂不支持代理

	return proxy
}

// HelloHzw HzwHelloProxy proxy
func (p *HzwHelloProxy) HelloHzw(ctx context.Context, req *hzw.HzwRequest) (*hzw.HzwReply, error) {
	methodName := "HelloHzw"
	handler := p.handlers[methodName]

	res, err := handler(ctx, req)
	if err != nil {
		slog.Error("failed to handle request!", "method", methodName, "error", err)
		return nil, err
	}

	return res.(*hzw.HzwReply), nil
}

// HelloHzwStream HzwHelloProxy proxy ClientStreaming ServerStreaming
func (p *HzwHelloProxy) HelloHzwStream(stream hzw.HzwHello_HelloHzwStreamServer) error {
	// FIXME 流式接口暂不支持代理，直接调用实现
	return p.impl.HelloHzwStream(stream)
}
