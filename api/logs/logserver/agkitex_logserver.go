// Code generated by agkitex. DO NOT EDIT!!!
// Code generated by agkitex. DO NOT EDIT!!!
// Code generated by agkitex. DO NOT EDIT!!!
//
// GenScope: service
// Generate time: 2025-09-19 16:58:27
// Versions:
//   - agkitex: v0.0.1
//   - kitex: v0.14.1
//   - protoc: v6.31.1
// Source:
//   - api/logs/logapi.proto

package logserver

import (
	logs "ag-layout-demo/api/logs"
	"context"
	"errors"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var logServerServiceMethods = map[string]kitex.MethodInfo{
	"BatchLog": kitex.NewMethodInfo(
		batchLogHandler,
		newBatchLogArgs,
		newBatchLogResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"StreamLog": kitex.NewMethodInfo(
		streamLogHandler,
		newStreamLogArgs,
		newStreamLogResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingClient),
	),
}

var (
	logServerServiceInfo                = NewServiceInfo()
	logServerServiceInfoForClient       = NewServiceInfoForClient()
	logServerServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return logServerServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return logServerServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return logServerServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "LogServer"
	handlerType := (*logs.LogServer)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range logServerServiceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api.logs",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.14.1_by_aggen", // FIXME 模板生成时应该获取kitex版本
		Extra:           extra,
	}
	return svcInfo
}

func batchLogHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(logs.BatchLogRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(logs.LogServer).BatchLog(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BatchLogArgs:
		success, err := handler.(logs.LogServer).BatchLog(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BatchLogResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBatchLogArgs() interface{} {
	return &BatchLogArgs{}
}

func newBatchLogResult() interface{} {
	return &BatchLogResult{}
}

type BatchLogArgs struct {
	Req *logs.BatchLogRequest
}

func (p *BatchLogArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BatchLogArgs) Unmarshal(in []byte) error {
	msg := new(logs.BatchLogRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BatchLogArgs_Req_DEFAULT *logs.BatchLogRequest

func (p *BatchLogArgs) GetReq() *logs.BatchLogRequest {
	if !p.IsSetReq() {
		return BatchLogArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BatchLogArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BatchLogArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BatchLogResult struct {
	Success *logs.BatchLogResponse
}

var BatchLogResult_Success_DEFAULT *logs.BatchLogResponse

func (p *BatchLogResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BatchLogResult) Unmarshal(in []byte) error {
	msg := new(logs.BatchLogResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BatchLogResult) GetSuccess() *logs.BatchLogResponse {
	if !p.IsSetSuccess() {
		return BatchLogResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BatchLogResult) SetSuccess(x interface{}) {
	p.Success = x.(*logs.BatchLogResponse)
}

func (p *BatchLogResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BatchLogResult) GetResult() interface{} {
	return p.Success
}

func streamLogHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	streamingArgs, ok := arg.(*streaming.Args)
	if !ok {
		return errInvalidMessageType
	}
	st := streamingArgs.Stream
	stream := &logServerStreamLogServer{st}
	return handler.(logs.LogServer).StreamLog(stream)
}

type logServerStreamLogClient struct {
	streaming.Stream
}

func (x *logServerStreamLogClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *logServerStreamLogClient) Send(m *logs.BatchLogRequest) error {
	return x.Stream.SendMsg(m)
}
func (x *logServerStreamLogClient) CloseAndRecv() (*logs.BatchLogResponse, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(logs.BatchLogResponse)
	return m, x.Stream.RecvMsg(m)
}

type logServerStreamLogServer struct {
	streaming.Stream
}

func (x *logServerStreamLogServer) SendAndClose(m *logs.BatchLogResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *logServerStreamLogServer) Recv() (*logs.BatchLogRequest, error) {
	m := new(logs.BatchLogRequest)
	return m, x.Stream.RecvMsg(m)
}

func newStreamLogArgs() interface{} {
	return &StreamLogArgs{}
}

func newStreamLogResult() interface{} {
	return &StreamLogResult{}
}

type StreamLogArgs struct {
	Req *logs.BatchLogRequest
}

func (p *StreamLogArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *StreamLogArgs) Unmarshal(in []byte) error {
	msg := new(logs.BatchLogRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var StreamLogArgs_Req_DEFAULT *logs.BatchLogRequest

func (p *StreamLogArgs) GetReq() *logs.BatchLogRequest {
	if !p.IsSetReq() {
		return StreamLogArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *StreamLogArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StreamLogArgs) GetFirstArgument() interface{} {
	return p.Req
}

type StreamLogResult struct {
	Success *logs.BatchLogResponse
}

var StreamLogResult_Success_DEFAULT *logs.BatchLogResponse

func (p *StreamLogResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *StreamLogResult) Unmarshal(in []byte) error {
	msg := new(logs.BatchLogResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *StreamLogResult) GetSuccess() *logs.BatchLogResponse {
	if !p.IsSetSuccess() {
		return StreamLogResult_Success_DEFAULT
	}
	return p.Success
}

func (p *StreamLogResult) SetSuccess(x interface{}) {
	p.Success = x.(*logs.BatchLogResponse)
}

func (p *StreamLogResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StreamLogResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) BatchLog(ctx context.Context, Req *logs.BatchLogRequest) (r *logs.BatchLogResponse, err error) {
	var _args BatchLogArgs
	_args.Req = Req
	var _result BatchLogResult
	if err = p.c.Call(ctx, "BatchLog", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StreamLog(ctx context.Context) (LogServer_StreamLogClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "StreamLog", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &logServerStreamLogClient{res.Stream}
	return stream, nil
}
