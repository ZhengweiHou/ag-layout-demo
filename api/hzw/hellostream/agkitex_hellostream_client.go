// Code generated by agkitex. DO NOT EDIT!!!
// Code generated by agkitex. DO NOT EDIT!!!
// Code generated by agkitex. DO NOT EDIT!!!
//
// GenScope: service
// Generate time: 2025-09-19 16:58:27
// Versions:
//   - agkitex: v0.0.1
//   - kitex: v0.14.1
//   - protoc: v6.31.1
// Source:
//   - api/hzw/hellostreaming.proto

package hellostream

import (
	hzw "ag-layout-demo/api/hzw"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	streamcall "github.com/cloudwego/kitex/client/callopt/streamcall"
	streamclient "github.com/cloudwego/kitex/client/streamclient"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	transport "github.com/cloudwego/kitex/transport"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	NoStreaming(ctx context.Context, Req *hzw.Request, callOptions ...callopt.Option) (r *hzw.Response, err error)
	ClientSideStreaming(ctx context.Context, callOptions ...callopt.Option) (stream HelloStream_ClientSideStreamingClient, err error)
	ServerSideStreaming(ctx context.Context, Req *hzw.Request, callOptions ...callopt.Option) (stream HelloStream_ServerSideStreamingClient, err error)
	BidiSideStreaming(ctx context.Context, callOptions ...callopt.Option) (stream HelloStream_BidiSideStreamingClient, err error)
}

// StreamClient is designed to provide Interface for Streaming APIs.
type StreamClient interface {
	ClientSideStreaming(ctx context.Context, callOptions ...streamcall.Option) (stream HelloStream_ClientSideStreamingClient, err error)
	ServerSideStreaming(ctx context.Context, Req *hzw.Request, callOptions ...streamcall.Option) (stream HelloStream_ServerSideStreamingClient, err error)
	BidiSideStreaming(ctx context.Context, callOptions ...streamcall.Option) (stream HelloStream_BidiSideStreamingClient, err error)
}

type HelloStream_ClientSideStreamingClient interface {
	streaming.Stream
	Send(*hzw.Request) error
	CloseAndRecv() (*hzw.Response, error)
}

type HelloStream_ServerSideStreamingClient interface {
	streaming.Stream
	Recv() (*hzw.Response, error)
}

type HelloStream_BidiSideStreamingClient interface {
	streaming.Stream
	Send(*hzw.Request) error
	Recv() (*hzw.Response, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, client.WithTransportProtocol(transport.GRPC))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kHelloStreamClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kHelloStreamClient struct {
	*kClient
}

func (p *kHelloStreamClient) NoStreaming(ctx context.Context, Req *hzw.Request, callOptions ...callopt.Option) (r *hzw.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.NoStreaming(ctx, Req)
}

func (p *kHelloStreamClient) ClientSideStreaming(ctx context.Context, callOptions ...callopt.Option) (stream HelloStream_ClientSideStreamingClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ClientSideStreaming(ctx)
}

func (p *kHelloStreamClient) ServerSideStreaming(ctx context.Context, Req *hzw.Request, callOptions ...callopt.Option) (stream HelloStream_ServerSideStreamingClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ServerSideStreaming(ctx, Req)
}

func (p *kHelloStreamClient) BidiSideStreaming(ctx context.Context, callOptions ...callopt.Option) (stream HelloStream_BidiSideStreamingClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BidiSideStreaming(ctx)
}

// NewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
func NewStreamClient(destService string, opts ...streamclient.Option) (StreamClient, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))
	options = append(options, client.WithTransportProtocol(transport.GRPC))
	options = append(options, streamclient.GetClientOptions(opts)...)

	kc, err := client.NewClient(serviceInfoForStreamClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kHelloStreamStreamClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
// It panics if any error occurs.
func MustNewStreamClient(destService string, opts ...streamclient.Option) StreamClient {
	kc, err := NewStreamClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kHelloStreamStreamClient struct {
	*kClient
}

func (p *kHelloStreamStreamClient) ClientSideStreaming(ctx context.Context, callOptions ...streamcall.Option) (stream HelloStream_ClientSideStreamingClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.ClientSideStreaming(ctx)
}

func (p *kHelloStreamStreamClient) ServerSideStreaming(ctx context.Context, Req *hzw.Request, callOptions ...streamcall.Option) (stream HelloStream_ServerSideStreamingClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.ServerSideStreaming(ctx, Req)
}

func (p *kHelloStreamStreamClient) BidiSideStreaming(ctx context.Context, callOptions ...streamcall.Option) (stream HelloStream_BidiSideStreamingClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.BidiSideStreaming(ctx)
}
