// Code generated by agkitex. DO NOT EDIT!!!
// Code generated by agkitex. DO NOT EDIT!!!
// Code generated by agkitex. DO NOT EDIT!!!
//
// GenScope: service
// Generate time: 2025-09-19 16:58:27
// Versions:
//   - agkitex: v0.0.1
//   - kitex: v0.14.1
//   - protoc: v6.31.1
// Source:
//   - api/hzw/hellostreaming.proto

package hellostream

import (
	hzw "ag-layout-demo/api/hzw"
	"context"
	"errors"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var helloStreamServiceMethods = map[string]kitex.MethodInfo{
	"NoStreaming": kitex.NewMethodInfo(
		noStreamingHandler,
		newNoStreamingArgs,
		newNoStreamingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ClientSideStreaming": kitex.NewMethodInfo(
		clientSideStreamingHandler,
		newClientSideStreamingArgs,
		newClientSideStreamingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingClient),
	),
	"ServerSideStreaming": kitex.NewMethodInfo(
		serverSideStreamingHandler,
		newServerSideStreamingArgs,
		newServerSideStreamingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
	"BidiSideStreaming": kitex.NewMethodInfo(
		bidiSideStreamingHandler,
		newBidiSideStreamingArgs,
		newBidiSideStreamingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingBidirectional),
	),
}

var (
	helloStreamServiceInfo                = NewServiceInfo()
	helloStreamServiceInfoForClient       = NewServiceInfoForClient()
	helloStreamServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return helloStreamServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return helloStreamServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return helloStreamServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "HelloStream"
	handlerType := (*hzw.HelloStream)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range helloStreamServiceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api.hzw",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.14.1_by_aggen", // FIXME 模板生成时应该获取kitex版本
		Extra:           extra,
	}
	return svcInfo
}

func noStreamingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(hzw.Request)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(hzw.HelloStream).NoStreaming(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *NoStreamingArgs:
		success, err := handler.(hzw.HelloStream).NoStreaming(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*NoStreamingResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newNoStreamingArgs() interface{} {
	return &NoStreamingArgs{}
}

func newNoStreamingResult() interface{} {
	return &NoStreamingResult{}
}

type NoStreamingArgs struct {
	Req *hzw.Request
}

func (p *NoStreamingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *NoStreamingArgs) Unmarshal(in []byte) error {
	msg := new(hzw.Request)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var NoStreamingArgs_Req_DEFAULT *hzw.Request

func (p *NoStreamingArgs) GetReq() *hzw.Request {
	if !p.IsSetReq() {
		return NoStreamingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *NoStreamingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *NoStreamingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type NoStreamingResult struct {
	Success *hzw.Response
}

var NoStreamingResult_Success_DEFAULT *hzw.Response

func (p *NoStreamingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *NoStreamingResult) Unmarshal(in []byte) error {
	msg := new(hzw.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *NoStreamingResult) GetSuccess() *hzw.Response {
	if !p.IsSetSuccess() {
		return NoStreamingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *NoStreamingResult) SetSuccess(x interface{}) {
	p.Success = x.(*hzw.Response)
}

func (p *NoStreamingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoStreamingResult) GetResult() interface{} {
	return p.Success
}

func clientSideStreamingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	streamingArgs, ok := arg.(*streaming.Args)
	if !ok {
		return errInvalidMessageType
	}
	st := streamingArgs.Stream
	stream := &helloStreamClientSideStreamingServer{st}
	return handler.(hzw.HelloStream).ClientSideStreaming(stream)
}

type helloStreamClientSideStreamingClient struct {
	streaming.Stream
}

func (x *helloStreamClientSideStreamingClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *helloStreamClientSideStreamingClient) Send(m *hzw.Request) error {
	return x.Stream.SendMsg(m)
}
func (x *helloStreamClientSideStreamingClient) CloseAndRecv() (*hzw.Response, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(hzw.Response)
	return m, x.Stream.RecvMsg(m)
}

type helloStreamClientSideStreamingServer struct {
	streaming.Stream
}

func (x *helloStreamClientSideStreamingServer) SendAndClose(m *hzw.Response) error {
	return x.Stream.SendMsg(m)
}

func (x *helloStreamClientSideStreamingServer) Recv() (*hzw.Request, error) {
	m := new(hzw.Request)
	return m, x.Stream.RecvMsg(m)
}

func newClientSideStreamingArgs() interface{} {
	return &ClientSideStreamingArgs{}
}

func newClientSideStreamingResult() interface{} {
	return &ClientSideStreamingResult{}
}

type ClientSideStreamingArgs struct {
	Req *hzw.Request
}

func (p *ClientSideStreamingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ClientSideStreamingArgs) Unmarshal(in []byte) error {
	msg := new(hzw.Request)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ClientSideStreamingArgs_Req_DEFAULT *hzw.Request

func (p *ClientSideStreamingArgs) GetReq() *hzw.Request {
	if !p.IsSetReq() {
		return ClientSideStreamingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ClientSideStreamingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ClientSideStreamingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ClientSideStreamingResult struct {
	Success *hzw.Response
}

var ClientSideStreamingResult_Success_DEFAULT *hzw.Response

func (p *ClientSideStreamingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ClientSideStreamingResult) Unmarshal(in []byte) error {
	msg := new(hzw.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ClientSideStreamingResult) GetSuccess() *hzw.Response {
	if !p.IsSetSuccess() {
		return ClientSideStreamingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ClientSideStreamingResult) SetSuccess(x interface{}) {
	p.Success = x.(*hzw.Response)
}

func (p *ClientSideStreamingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ClientSideStreamingResult) GetResult() interface{} {
	return p.Success
}

func serverSideStreamingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	streamingArgs, ok := arg.(*streaming.Args)
	if !ok {
		return errInvalidMessageType
	}
	st := streamingArgs.Stream
	stream := &helloStreamServerSideStreamingServer{st}
	req := new(hzw.Request)
	if err := st.RecvMsg(req); err != nil {
		return err
	}
	return handler.(hzw.HelloStream).ServerSideStreaming(req, stream)
}

type helloStreamServerSideStreamingClient struct {
	streaming.Stream
}

func (x *helloStreamServerSideStreamingClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *helloStreamServerSideStreamingClient) Recv() (*hzw.Response, error) {
	m := new(hzw.Response)
	return m, x.Stream.RecvMsg(m)
}

type helloStreamServerSideStreamingServer struct {
	streaming.Stream
}

func (x *helloStreamServerSideStreamingServer) Send(m *hzw.Response) error {
	return x.Stream.SendMsg(m)
}

func newServerSideStreamingArgs() interface{} {
	return &ServerSideStreamingArgs{}
}

func newServerSideStreamingResult() interface{} {
	return &ServerSideStreamingResult{}
}

type ServerSideStreamingArgs struct {
	Req *hzw.Request
}

func (p *ServerSideStreamingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ServerSideStreamingArgs) Unmarshal(in []byte) error {
	msg := new(hzw.Request)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ServerSideStreamingArgs_Req_DEFAULT *hzw.Request

func (p *ServerSideStreamingArgs) GetReq() *hzw.Request {
	if !p.IsSetReq() {
		return ServerSideStreamingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ServerSideStreamingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ServerSideStreamingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ServerSideStreamingResult struct {
	Success *hzw.Response
}

var ServerSideStreamingResult_Success_DEFAULT *hzw.Response

func (p *ServerSideStreamingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ServerSideStreamingResult) Unmarshal(in []byte) error {
	msg := new(hzw.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ServerSideStreamingResult) GetSuccess() *hzw.Response {
	if !p.IsSetSuccess() {
		return ServerSideStreamingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ServerSideStreamingResult) SetSuccess(x interface{}) {
	p.Success = x.(*hzw.Response)
}

func (p *ServerSideStreamingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServerSideStreamingResult) GetResult() interface{} {
	return p.Success
}

func bidiSideStreamingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	streamingArgs, ok := arg.(*streaming.Args)
	if !ok {
		return errInvalidMessageType
	}
	st := streamingArgs.Stream
	stream := &helloStreamBidiSideStreamingServer{st}
	return handler.(hzw.HelloStream).BidiSideStreaming(stream)
}

type helloStreamBidiSideStreamingClient struct {
	streaming.Stream
}

func (x *helloStreamBidiSideStreamingClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *helloStreamBidiSideStreamingClient) Send(m *hzw.Request) error {
	return x.Stream.SendMsg(m)
}
func (x *helloStreamBidiSideStreamingClient) Recv() (*hzw.Response, error) {
	m := new(hzw.Response)
	return m, x.Stream.RecvMsg(m)
}

type helloStreamBidiSideStreamingServer struct {
	streaming.Stream
}

func (x *helloStreamBidiSideStreamingServer) Send(m *hzw.Response) error {
	return x.Stream.SendMsg(m)
}

func (x *helloStreamBidiSideStreamingServer) Recv() (*hzw.Request, error) {
	m := new(hzw.Request)
	return m, x.Stream.RecvMsg(m)
}

func newBidiSideStreamingArgs() interface{} {
	return &BidiSideStreamingArgs{}
}

func newBidiSideStreamingResult() interface{} {
	return &BidiSideStreamingResult{}
}

type BidiSideStreamingArgs struct {
	Req *hzw.Request
}

func (p *BidiSideStreamingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BidiSideStreamingArgs) Unmarshal(in []byte) error {
	msg := new(hzw.Request)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BidiSideStreamingArgs_Req_DEFAULT *hzw.Request

func (p *BidiSideStreamingArgs) GetReq() *hzw.Request {
	if !p.IsSetReq() {
		return BidiSideStreamingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BidiSideStreamingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BidiSideStreamingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BidiSideStreamingResult struct {
	Success *hzw.Response
}

var BidiSideStreamingResult_Success_DEFAULT *hzw.Response

func (p *BidiSideStreamingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BidiSideStreamingResult) Unmarshal(in []byte) error {
	msg := new(hzw.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BidiSideStreamingResult) GetSuccess() *hzw.Response {
	if !p.IsSetSuccess() {
		return BidiSideStreamingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BidiSideStreamingResult) SetSuccess(x interface{}) {
	p.Success = x.(*hzw.Response)
}

func (p *BidiSideStreamingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BidiSideStreamingResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) NoStreaming(ctx context.Context, Req *hzw.Request) (r *hzw.Response, err error) {
	var _args NoStreamingArgs
	_args.Req = Req
	var _result NoStreamingResult
	if err = p.c.Call(ctx, "NoStreaming", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ClientSideStreaming(ctx context.Context) (HelloStream_ClientSideStreamingClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "ClientSideStreaming", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &helloStreamClientSideStreamingClient{res.Stream}
	return stream, nil
}

func (p *kClient) ServerSideStreaming(ctx context.Context, req *hzw.Request) (HelloStream_ServerSideStreamingClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "ServerSideStreaming", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &helloStreamServerSideStreamingClient{res.Stream}

	if err := stream.Stream.SendMsg(req); err != nil {
		return nil, err
	}
	if err := stream.Stream.Close(); err != nil {
		return nil, err
	}
	return stream, nil
}

func (p *kClient) BidiSideStreaming(ctx context.Context) (HelloStream_BidiSideStreamingClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "BidiSideStreaming", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &helloStreamBidiSideStreamingClient{res.Stream}
	return stream, nil
}
