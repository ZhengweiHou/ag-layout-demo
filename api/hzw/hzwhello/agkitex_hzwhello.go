// Code generated by agkitex. DO NOT EDIT!!!
// Code generated by agkitex. DO NOT EDIT!!!
// Code generated by agkitex. DO NOT EDIT!!!
//
// GenScope: service
// Generate time: 2025-09-19 16:58:27
// Versions:
//   - agkitex: v0.0.1
//   - kitex: v0.14.1
//   - protoc: v6.31.1
// Source:
//   - api/hzw/hzw.proto

package hzwhello

import (
	hzw "ag-layout-demo/api/hzw"
	"context"
	"errors"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var hzwHelloServiceMethods = map[string]kitex.MethodInfo{
	"HelloHzw": kitex.NewMethodInfo(
		helloHzwHandler,
		newHelloHzwArgs,
		newHelloHzwResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"HelloHzwStream": kitex.NewMethodInfo(
		helloHzwStreamHandler,
		newHelloHzwStreamArgs,
		newHelloHzwStreamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingBidirectional),
	),
}

var (
	hzwHelloServiceInfo                = NewServiceInfo()
	hzwHelloServiceInfoForClient       = NewServiceInfoForClient()
	hzwHelloServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return hzwHelloServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return hzwHelloServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return hzwHelloServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "HzwHello"
	handlerType := (*hzw.HzwHello)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range hzwHelloServiceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "api.hzw",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.14.1_by_aggen", // FIXME 模板生成时应该获取kitex版本
		Extra:           extra,
	}
	return svcInfo
}

func helloHzwHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(hzw.HzwRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(hzw.HzwHello).HelloHzw(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *HelloHzwArgs:
		success, err := handler.(hzw.HzwHello).HelloHzw(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*HelloHzwResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newHelloHzwArgs() interface{} {
	return &HelloHzwArgs{}
}

func newHelloHzwResult() interface{} {
	return &HelloHzwResult{}
}

type HelloHzwArgs struct {
	Req *hzw.HzwRequest
}

func (p *HelloHzwArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *HelloHzwArgs) Unmarshal(in []byte) error {
	msg := new(hzw.HzwRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var HelloHzwArgs_Req_DEFAULT *hzw.HzwRequest

func (p *HelloHzwArgs) GetReq() *hzw.HzwRequest {
	if !p.IsSetReq() {
		return HelloHzwArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *HelloHzwArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *HelloHzwArgs) GetFirstArgument() interface{} {
	return p.Req
}

type HelloHzwResult struct {
	Success *hzw.HzwReply
}

var HelloHzwResult_Success_DEFAULT *hzw.HzwReply

func (p *HelloHzwResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *HelloHzwResult) Unmarshal(in []byte) error {
	msg := new(hzw.HzwReply)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *HelloHzwResult) GetSuccess() *hzw.HzwReply {
	if !p.IsSetSuccess() {
		return HelloHzwResult_Success_DEFAULT
	}
	return p.Success
}

func (p *HelloHzwResult) SetSuccess(x interface{}) {
	p.Success = x.(*hzw.HzwReply)
}

func (p *HelloHzwResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HelloHzwResult) GetResult() interface{} {
	return p.Success
}

func helloHzwStreamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	streamingArgs, ok := arg.(*streaming.Args)
	if !ok {
		return errInvalidMessageType
	}
	st := streamingArgs.Stream
	stream := &hzwHelloHelloHzwStreamServer{st}
	return handler.(hzw.HzwHello).HelloHzwStream(stream)
}

type hzwHelloHelloHzwStreamClient struct {
	streaming.Stream
}

func (x *hzwHelloHelloHzwStreamClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *hzwHelloHelloHzwStreamClient) Send(m *hzw.HzwRequest) error {
	return x.Stream.SendMsg(m)
}
func (x *hzwHelloHelloHzwStreamClient) Recv() (*hzw.HzwReply, error) {
	m := new(hzw.HzwReply)
	return m, x.Stream.RecvMsg(m)
}

type hzwHelloHelloHzwStreamServer struct {
	streaming.Stream
}

func (x *hzwHelloHelloHzwStreamServer) Send(m *hzw.HzwReply) error {
	return x.Stream.SendMsg(m)
}

func (x *hzwHelloHelloHzwStreamServer) Recv() (*hzw.HzwRequest, error) {
	m := new(hzw.HzwRequest)
	return m, x.Stream.RecvMsg(m)
}

func newHelloHzwStreamArgs() interface{} {
	return &HelloHzwStreamArgs{}
}

func newHelloHzwStreamResult() interface{} {
	return &HelloHzwStreamResult{}
}

type HelloHzwStreamArgs struct {
	Req *hzw.HzwRequest
}

func (p *HelloHzwStreamArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *HelloHzwStreamArgs) Unmarshal(in []byte) error {
	msg := new(hzw.HzwRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var HelloHzwStreamArgs_Req_DEFAULT *hzw.HzwRequest

func (p *HelloHzwStreamArgs) GetReq() *hzw.HzwRequest {
	if !p.IsSetReq() {
		return HelloHzwStreamArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *HelloHzwStreamArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *HelloHzwStreamArgs) GetFirstArgument() interface{} {
	return p.Req
}

type HelloHzwStreamResult struct {
	Success *hzw.HzwReply
}

var HelloHzwStreamResult_Success_DEFAULT *hzw.HzwReply

func (p *HelloHzwStreamResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *HelloHzwStreamResult) Unmarshal(in []byte) error {
	msg := new(hzw.HzwReply)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *HelloHzwStreamResult) GetSuccess() *hzw.HzwReply {
	if !p.IsSetSuccess() {
		return HelloHzwStreamResult_Success_DEFAULT
	}
	return p.Success
}

func (p *HelloHzwStreamResult) SetSuccess(x interface{}) {
	p.Success = x.(*hzw.HzwReply)
}

func (p *HelloHzwStreamResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HelloHzwStreamResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) HelloHzw(ctx context.Context, Req *hzw.HzwRequest) (r *hzw.HzwReply, err error) {
	var _args HelloHzwArgs
	_args.Req = Req
	var _result HelloHzwResult
	if err = p.c.Call(ctx, "HelloHzw", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) HelloHzwStream(ctx context.Context) (HzwHello_HelloHzwStreamClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "HelloHzwStream", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &hzwHelloHelloHzwStreamClient{res.Stream}
	return stream, nil
}
